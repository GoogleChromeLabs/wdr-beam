rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
      match /uploads/{key} {
        function isValidDomain(data) {
          return data.domain == 'developer.chrome.com' || data.domain == 'web.dev';
        }
        function isValidHeight(data) {
          return (data.keys().hasAny(['height']) && (data.height is int || data.height is float)) || !data.keys().hasAny(['height']);
        }
        function isValidType(data) {
          return data.type == 'file' || data.type == 'image' || data.type == 'video';
        }
        function isValidWidth(data) {
          return (data.keys().hasAny(['width']) && (data.width is int || data.width is float)) || !data.keys().hasAny(['width']);
        }

      	allow create: if request.auth.token.googler &&
          request.resource.data.date is int &&
          isValidDomain(request.resource.data) &&
          request.resource.data.extension is string &&
          isValidHeight(request.resource.data) &&
          request.resource.data.name is string &&
          request.resource.data.src is string &&
          isValidType(request.resource.data) &&
        	request.auth.uid == request.resource.data.uid &&
					isValidWidth(request.resource.data) &&
          request.resource.data.keys().hasOnly(['date', 'domain', 'extension', 'height', 'name', 'src', 'type', 'uid', 'width']);
        allow read: if true;
    	}
    }
  }
}